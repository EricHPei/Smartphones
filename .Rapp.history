rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(package)
by_package <- group_by(cran,package)
by_package
summarize(cran,mean(size))
summarize(by_package,mean(size))
?n
count = n()
submit()
print(tbl,pack_sum)
pack_sum
?n_distinct
quantile(pack_sum$count,probs=.99)
top_counts<-filter(pack_sum,count>689)
top_counts<-filter(pack_sum,count>679)
top_counts
head(top_counts,20)
arrange(top_counts,desc(count)
)
quantile(pack_sum$unique,probs=0.99)
top_unique <- filter(pack_sum,unique>465)
top_unique
arrange(top_unique, desc(unique)
)
submit()
?chain
submit()
?mutate)()
?mutate()
submit()
?mutate()
submit()
swirl()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students,"sex","count",-grade)
gather(students,sex,count,-grade)
students2
res<-gather(students2,sex_class,count)
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_class,c("sex","class"))
submit()
stdeunts3
students3
submit()
?spread
submit()
?spread
submit()
extract_numeric("class5")
submit()
?mutate
?mutate()
submit()
students4
submit()
passed
failed
?
w
mutate(passed,status,passed="passed")
mutate(passed,"status",passed="passed")
mutate(passed,status="passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
rbind_list(passed,failed)
sat
?separate()
submit()
?separate()
submit()
?separate()
submit()
getwd()
setwd("desktop/R")
getwd()
install.packages("RMySql")
install.packages("RMySQL")
install.packages("RMySQL", type = "source")
isntall.packages("MySQL")
install.packages("MySQL")
Sys.setenv(PKG_CPPFLAGS = "-I/usr/local/include/mysql")
Sys.setenv(PKG_LIBS = "-L/usr/local/lib -lmysqlclient")
install.packages("RMySQL", type="source")
library(RMySQL)
getwd()
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
A=matrix(1:10,nr=5,nc=2)
h5write(A, "example.h5", "foo/A")
b=array(seq(0.1,2.0,by=0.1), dim=c(5,2,2))
attr(B,"scale") <- "liter"
attr(b,"scale") <- "liter"
h5write(b, "example.h5","foo/foobaa/b")
h5ls()
h5ls("example.h5")
df = data.frame(1L:5L, seq(0,1,length.out=5)),
df = data.frame(1L:5L, seq(0,1,length.out=5),
c("ab","cde","fghi","a","s"), stringsAsFactors=FALSE)
h5write(df, "example.h5","df")
h5ls("example.h5")
readA = h5read("example.h5","foo/A")
readb = h5read("example.h5","foo/foobaa/b")
readdf=h5read("example.h5","df")
readA
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3,1))
h5read("example.h5","foo/A")
getwd()
package.download("sqldf")
install.packages("sqldf")
library(sqldf)
library(RMySQL)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile = "./data/questtwo.csv", method = "curl")
list.files("./data")
dateDownloaded <- date()
dateDownloaded
acs <- read.table("./data/questtwo.csv",sep=",",header=TRUE)
acs
sqldf("select * from acs where AGEP < 50")
sqldf("select * from acs")
sqldf("select * from acs where AGEP < 50 and pwgtp1")
drv='SQLite'
sqldf("select * from acs where AGEP < 50 and pwgtp1")
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
htmlCode
nchar(10)
?nchar()
nchar(htmlCode)
nchar(htmlCode[10,])
bob <- htmlCode[10,]
bob <- subset[htmlCode, 10,]
nchar(htmlCode(c(10,20,30,100)))
nchar(htmlCode[c(10,20,30,100]))
nchar(htmlCode[c(10,20,30,100)])
library(datasets)
data(iris)
?iris
y <- data(iris)
y
mean(Sepal.Length)
z <- read.csv("y")
z <- read.csv(y)
iris
tw <- iris[,1 where Species == 'virginica']
tw <- iris[,1(where Species == 'virginica')]
tw <- iris[,1]
tw
sum(tw)
sum(tw[101:150])
329.4/50
sum(tw[101:150])/4
sum(tw[101:150])/50
mean(tw[101:150])
apply(iris,2,mean)
library(datasets)
data(mtcars)
mtcars
with(mtcars,tapply(mpg,cyl,mean))
with(mtcars,tapply(hp,cyl,mean))
209.21429-82.63636
debug(ls)
ls
getwd()
setwd("Users/ericpei/Desktop/Cleaning Data Coursera")
setwd(..)
?setwd()
setwd(/)
setwd(.)
setwd("..")
getwd()
setwd("Cleaning Data Coursera")
getwd()
setwd("Smartphones")
getwd()
source("run_analysis.R")
source("run_analysis.R")
dateDownloaded
list.files
ls
source("run_analysis.R")
source("run_analysis.R")
source("run_analysis.R")
source("run_analysis.R")
source("run_analysis.R")
source("run_analysis.R")
source("run_analysis.R")
getwd()
source("run_analysis.R")
X_train
head(X_train)
source("run_analysis.R")
dim(X_train)
dim(Y_train)
Y_train
dim(X_train)
dim(Y_train)
dim(Sub_train)
Sub_train
source("run_analysis.R")
dim(X_train)
dim(X_test)
dim(Y_train)
dim(Y_test)
dim(Sub_test)
dim(Sub_train)
head(X_train, 3)
head(Y_train, 3)
Y_train
dim(X_train)
dim(Y_train)
dim(X_test)
dim(Y_test)
dim(Sub_train)
dim(Sub_test)
train <- cbind(Y_train, X_train)
dim(train)
head(train)
source("run_analysis.R")
dim(mergedTrain)
dim(MergedTest)
dim(mergedTest)
source("run_analysis.R")
source("run_analysis.R")
source("run_analysis.R")
head(testtrain)
(testtrain)dim
dim(testtrain)
source("run_analysis.R")
source("run_analysis.R")
head(subset)
source("run_analysis.R")
write.table(MyData, file = "Mydata.txt", row.names = FALSE)
write.table(subset, file = "Mydata.txt", row.names = FALSE)
